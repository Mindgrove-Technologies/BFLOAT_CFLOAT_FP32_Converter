//
// Generated by Bluespec Compiler (build 26e119fb)
//
// On Sun Dec  3 22:21:47 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTestbench(CLK,
		   RST_N);
  input  CLK;
  input  RST_N;

  // register rg_counter
  reg [31 : 0] rg_counter;
  wire [31 : 0] rg_counter$D_IN;
  wire rg_counter$EN;

  // register sm_bi_rg_bias
  reg [5 : 0] sm_bi_rg_bias;
  wire [5 : 0] sm_bi_rg_bias$D_IN;
  wire sm_bi_rg_bias$EN;

  // register sm_bi_rg_cfloat143
  reg [7 : 0] sm_bi_rg_cfloat143;
  wire [7 : 0] sm_bi_rg_cfloat143$D_IN;
  wire sm_bi_rg_cfloat143$EN;

  // register sm_bi_rg_flags
  reg [4 : 0] sm_bi_rg_flags;
  wire [4 : 0] sm_bi_rg_flags$D_IN;
  wire sm_bi_rg_flags$EN;

  // register sm_bi_rg_fp32
  reg [31 : 0] sm_bi_rg_fp32;
  wire [31 : 0] sm_bi_rg_fp32$D_IN;
  wire sm_bi_rg_fp32$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_count,
       CAN_FIRE_RL_rl_sample_2,
       CAN_FIRE_RL_sm_bi_rl_convert_cfloat8_fp32,
       WILL_FIRE_RL_rl_count,
       WILL_FIRE_RL_rl_sample_2,
       WILL_FIRE_RL_sm_bi_rl_convert_cfloat8_fp32;

  // remaining internal signals
  reg [22 : 0] CASE_sm_bi_rg_cfloat143_BITS_2_TO_0_0b11_41943_ETC__q1,
	       _theResult_____2_mantissa__h292;
  reg [7 : 0] IF_sm_bi_rg_cfloat143_BITS_2_TO_0_EQ_0b111_3_O_ETC___d32;
  wire [30 : 0] IF_sm_bi_rg_cfloat143_BITS_2_TO_0_EQ_0b111_3_O_ETC___d43,
		IF_sm_bi_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_sm__ETC___d48;
  wire [22 : 0] _theResult_____3_mantissa__h289, result__h646;
  wire [7 : 0] _128_MINUS_0_CONCAT_sm_bi_rg_bias_0_1_2_MINUS_2___d23,
	       _128_MINUS_0_CONCAT_sm_bi_rg_bias_0_1_2_MINUS_3___d27,
	       lv_fp32___1_exponent__h305,
	       lv_fp32_exponent__h324,
	       x__h509,
	       x__h539,
	       y__h542;

  // rule RL_rl_count
  assign CAN_FIRE_RL_rl_count = 1'd1 ;
  assign WILL_FIRE_RL_rl_count = 1'd1 ;

  // rule RL_sm_bi_rl_convert_cfloat8_fp32
  assign CAN_FIRE_RL_sm_bi_rl_convert_cfloat8_fp32 = 1'd1 ;
  assign WILL_FIRE_RL_sm_bi_rl_convert_cfloat8_fp32 = 1'd1 ;

  // rule RL_rl_sample_2
  assign CAN_FIRE_RL_rl_sample_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_sample_2 = 1'd1 ;

  // register rg_counter
  assign rg_counter$D_IN = rg_counter + 32'd1 ;
  assign rg_counter$EN = 1'd1 ;

  // register sm_bi_rg_bias
  assign sm_bi_rg_bias$D_IN = 6'd0 ;
  assign sm_bi_rg_bias$EN = 1'd1 ;

  // register sm_bi_rg_cfloat143
  assign sm_bi_rg_cfloat143$D_IN = 8'd3 ;
  assign sm_bi_rg_cfloat143$EN = 1'd1 ;

  // register sm_bi_rg_flags
  assign sm_bi_rg_flags$D_IN = 5'h0 ;
  assign sm_bi_rg_flags$EN = 1'b0 ;

  // register sm_bi_rg_fp32
  assign sm_bi_rg_fp32$D_IN =
	     { sm_bi_rg_cfloat143[7],
	       IF_sm_bi_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_sm__ETC___d48 } ;
  assign sm_bi_rg_fp32$EN = 1'd1 ;

  // remaining internal signals
  assign IF_sm_bi_rg_cfloat143_BITS_2_TO_0_EQ_0b111_3_O_ETC___d43 =
	     { IF_sm_bi_rg_cfloat143_BITS_2_TO_0_EQ_0b111_3_O_ETC___d32,
	       CASE_sm_bi_rg_cfloat143_BITS_2_TO_0_0b11_41943_ETC__q1 } ;
  assign IF_sm_bi_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_sm__ETC___d48 =
	     (sm_bi_rg_cfloat143[6:3] == 4'd0 &&
	      sm_bi_rg_cfloat143[2:0] == 3'd0) ?
	       { lv_fp32___1_exponent__h305,
		 sm_bi_rg_cfloat143[2:0],
		 20'd0 } :
	       ((sm_bi_rg_cfloat143[6:3] == 4'd0 &&
		 sm_bi_rg_cfloat143[2:0] != 3'd0) ?
		  IF_sm_bi_rg_cfloat143_BITS_2_TO_0_EQ_0b111_3_O_ETC___d43 :
		  { lv_fp32_exponent__h324,
		    sm_bi_rg_cfloat143[2:0],
		    20'd0 }) ;
  assign _128_MINUS_0_CONCAT_sm_bi_rg_bias_0_1_2_MINUS_2___d23 =
	     x__h509 - 8'd2 ;
  assign _128_MINUS_0_CONCAT_sm_bi_rg_bias_0_1_2_MINUS_3___d27 =
	     x__h509 - 8'd3 ;
  assign _theResult_____3_mantissa__h289 =
	     (sm_bi_rg_cfloat143[2:0] == 3'b011) ? 23'd4194304 : 23'd0 ;
  assign lv_fp32___1_exponent__h305 = { 4'd0, sm_bi_rg_cfloat143[6:3] } ;
  assign lv_fp32_exponent__h324 = x__h539 + 8'd127 ;
  assign result__h646 = { 1'd1, _theResult_____2_mantissa__h292[21:0] } ;
  assign x__h509 = 8'd128 - y__h542 ;
  assign x__h539 = lv_fp32___1_exponent__h305 - y__h542 ;
  assign y__h542 = { 2'd0, sm_bi_rg_bias } ;
  always@(sm_bi_rg_cfloat143 or _theResult_____3_mantissa__h289)
  begin
    case (sm_bi_rg_cfloat143[2:0])
      3'b011: _theResult_____2_mantissa__h292 = 23'd4194304;
      3'b101:
	  _theResult_____2_mantissa__h292 =
	      { 2'd1, _theResult_____3_mantissa__h289[20:0] };
      default: _theResult_____2_mantissa__h292 = 23'd0;
    endcase
  end
  always@(sm_bi_rg_cfloat143 or
	  x__h509 or
	  _128_MINUS_0_CONCAT_sm_bi_rg_bias_0_1_2_MINUS_3___d27 or
	  _128_MINUS_0_CONCAT_sm_bi_rg_bias_0_1_2_MINUS_2___d23)
  begin
    case (sm_bi_rg_cfloat143[2:0])
      3'd0: IF_sm_bi_rg_cfloat143_BITS_2_TO_0_EQ_0b111_3_O_ETC___d32 = 8'd0;
      3'b001:
	  IF_sm_bi_rg_cfloat143_BITS_2_TO_0_EQ_0b111_3_O_ETC___d32 =
	      x__h509 - 8'd4;
      3'b010, 3'b011:
	  IF_sm_bi_rg_cfloat143_BITS_2_TO_0_EQ_0b111_3_O_ETC___d32 =
	      _128_MINUS_0_CONCAT_sm_bi_rg_bias_0_1_2_MINUS_3___d27;
      3'b100, 3'b101, 3'b110, 3'b111:
	  IF_sm_bi_rg_cfloat143_BITS_2_TO_0_EQ_0b111_3_O_ETC___d32 =
	      _128_MINUS_0_CONCAT_sm_bi_rg_bias_0_1_2_MINUS_2___d23;
    endcase
  end
  always@(sm_bi_rg_cfloat143 or
	  _theResult_____3_mantissa__h289 or
	  result__h646 or _theResult_____2_mantissa__h292)
  begin
    case (sm_bi_rg_cfloat143[2:0])
      3'b011:
	  CASE_sm_bi_rg_cfloat143_BITS_2_TO_0_0b11_41943_ETC__q1 =
	      23'd4194304;
      3'b101:
	  CASE_sm_bi_rg_cfloat143_BITS_2_TO_0_0b11_41943_ETC__q1 =
	      { 2'd1, _theResult_____3_mantissa__h289[20:0] };
      3'b110:
	  CASE_sm_bi_rg_cfloat143_BITS_2_TO_0_0b11_41943_ETC__q1 =
	      result__h646;
      3'b111:
	  CASE_sm_bi_rg_cfloat143_BITS_2_TO_0_0b11_41943_ETC__q1 =
	      { 2'd3, _theResult_____2_mantissa__h292[20:0] };
      default: CASE_sm_bi_rg_cfloat143_BITS_2_TO_0_0b11_41943_ETC__q1 = 23'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_counter <= `BSV_ASSIGNMENT_DELAY 32'd0;
	sm_bi_rg_bias <= `BSV_ASSIGNMENT_DELAY 6'd0;
	sm_bi_rg_cfloat143 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	sm_bi_rg_flags <= `BSV_ASSIGNMENT_DELAY 5'd0;
	sm_bi_rg_fp32 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (rg_counter$EN)
	  rg_counter <= `BSV_ASSIGNMENT_DELAY rg_counter$D_IN;
	if (sm_bi_rg_bias$EN)
	  sm_bi_rg_bias <= `BSV_ASSIGNMENT_DELAY sm_bi_rg_bias$D_IN;
	if (sm_bi_rg_cfloat143$EN)
	  sm_bi_rg_cfloat143 <= `BSV_ASSIGNMENT_DELAY sm_bi_rg_cfloat143$D_IN;
	if (sm_bi_rg_flags$EN)
	  sm_bi_rg_flags <= `BSV_ASSIGNMENT_DELAY sm_bi_rg_flags$D_IN;
	if (sm_bi_rg_fp32$EN)
	  sm_bi_rg_fp32 <= `BSV_ASSIGNMENT_DELAY sm_bi_rg_fp32$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_counter = 32'hAAAAAAAA;
    sm_bi_rg_bias = 6'h2A;
    sm_bi_rg_cfloat143 = 8'hAA;
    sm_bi_rg_flags = 5'h0A;
    sm_bi_rg_fp32 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkTestbench

