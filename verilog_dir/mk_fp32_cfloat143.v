//
// Generated by Bluespec Compiler (build 26e119fb)
//
// On Sun Dec  3 22:21:46 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// get_cfloat143                  O     8 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// convert_fp32_cfloat143_fp32_in  I    32 reg
// convert_fp32_cfloat143_bias    I     6 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_fp32_cfloat143(CLK,
			 RST_N,

			 convert_fp32_cfloat143_fp32_in,
			 convert_fp32_cfloat143_bias,

			 get_cfloat143);
  input  CLK;
  input  RST_N;

  // action method convert_fp32_cfloat143
  input  [31 : 0] convert_fp32_cfloat143_fp32_in;
  input  [5 : 0] convert_fp32_cfloat143_bias;

  // value method get_cfloat143
  output [7 : 0] get_cfloat143;

  // signals for module outputs
  wire [7 : 0] get_cfloat143;

  // register rg_bias
  reg [5 : 0] rg_bias;
  wire [5 : 0] rg_bias$D_IN;
  wire rg_bias$EN;

  // register rg_cfloat143
  reg [7 : 0] rg_cfloat143;
  wire [7 : 0] rg_cfloat143$D_IN;
  wire rg_cfloat143$EN;

  // register rg_flags
  reg [4 : 0] rg_flags;
  wire [4 : 0] rg_flags$D_IN;
  wire rg_flags$EN;

  // register rg_fp32
  reg [31 : 0] rg_fp32;
  wire [31 : 0] rg_fp32$D_IN;
  wire rg_fp32$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_convert_fp32_cfloat8,
       CAN_FIRE_convert_fp32_cfloat143,
       WILL_FIRE_RL_rl_convert_fp32_cfloat8,
       WILL_FIRE_convert_fp32_cfloat143;

  // remaining internal signals
  reg [3 : 0] _theResult___fst_exponent__h1565;
  reg [2 : 0] _theResult___fst_mantissa__h1219,
	      _theResult___fst_mantissa__h1447,
	      _theResult___fst_mantissa__h1566,
	      _theResult___fst_mantissa__h989;
  wire [7 : 0] _128_MINUS_0_CONCAT_rg_bias_2_7_8_MINUS_4___d30,
	       exponent_overflow_limit__h185,
	       exponent_underflow_limit__h186,
	       x__h669,
	       x__h685,
	       y__h319,
	       y__h346,
	       y__h686;
  wire [6 : 0] IF_rg_fp32_BITS_30_TO_23_EQ_0_AND_rg_fp32_BITS_ETC___d113,
	       IF_rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCA_ETC___d111,
	       temp___1__h661,
	       temp__h628;
  wire [5 : 0] x__h326, x__h347;
  wire [3 : 0] _theResult___fst_exponent__h1568,
	       _theResult___fst_exponent__h1580;
  wire [2 : 0] _theResult___fst_mantissa__h1569,
	       _theResult___fst_mantissa__h1572,
	       _theResult___fst_mantissa__h1575,
	       _theResult___fst_mantissa__h1578,
	       _theResult___fst_mantissa__h1581;
  wire _theResult___fst_overflow__h717,
       _theResult___fst_overflow__h722,
       _theResult___snd_denormal__h604,
       _theResult___snd_denormal__h609,
       _theResult___snd_denormal__h614,
       _theResult___snd_denormal__h619,
       _theResult___snd_denormal__h726,
       _theResult___snd_denormal__h731,
       lv_flags_overflow__h232,
       rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d33,
       rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d35,
       rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d37,
       rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d39,
       rg_fp32_BITS_30_TO_23_ULE_IF_rg_bias_2_ULE_15__ETC___d21,
       rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCAT_r_ETC___d29,
       rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCAT_r_ETC___d31,
       x__h740,
       x__h745;

  // action method convert_fp32_cfloat143
  assign CAN_FIRE_convert_fp32_cfloat143 = 1'd1 ;
  assign WILL_FIRE_convert_fp32_cfloat143 = 1'd1 ;

  // value method get_cfloat143
  assign get_cfloat143 = rg_cfloat143 ;

  // rule RL_rl_convert_fp32_cfloat8
  assign CAN_FIRE_RL_rl_convert_fp32_cfloat8 = 1'd1 ;
  assign WILL_FIRE_RL_rl_convert_fp32_cfloat8 = 1'd1 ;

  // register rg_bias
  assign rg_bias$D_IN = convert_fp32_cfloat143_bias ;
  assign rg_bias$EN = 1'd1 ;

  // register rg_cfloat143
  assign rg_cfloat143$D_IN =
	     { rg_fp32[31],
	       IF_rg_fp32_BITS_30_TO_23_EQ_0_AND_rg_fp32_BITS_ETC___d113 } ;
  assign rg_cfloat143$EN = 1'd1 ;

  // register rg_flags
  assign rg_flags$D_IN =
	     { rg_fp32[30:23] == 8'd0 && rg_fp32[22:0] == 23'd0,
	       rg_fp32[30:23] == 8'd255,
	       x__h740,
	       x__h745,
	       rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCAT_r_ETC___d29 } ;
  assign rg_flags$EN = 1'd1 ;

  // register rg_fp32
  assign rg_fp32$D_IN = convert_fp32_cfloat143_fp32_in ;
  assign rg_fp32$EN = 1'd1 ;

  // remaining internal signals
  assign IF_rg_fp32_BITS_30_TO_23_EQ_0_AND_rg_fp32_BITS_ETC___d113 =
	     (rg_fp32[30:23] == 8'd0 && rg_fp32[22:0] == 23'd0) ?
	       7'd0 :
	       ((rg_fp32[30:23] == 8'd255 || lv_flags_overflow__h232) ?
		  7'd127 :
		  IF_rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCA_ETC___d111) ;
  assign IF_rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCA_ETC___d111 =
	     rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCAT_r_ETC___d29 ?
	       { _theResult___fst_exponent__h1580,
		 _theResult___fst_mantissa__h1581 } :
	       (rg_fp32[19] ? temp___1__h661 : temp__h628) ;
  assign _128_MINUS_0_CONCAT_rg_bias_2_7_8_MINUS_4___d30 =
	     exponent_underflow_limit__h186 - 8'd4 ;
  assign _theResult___fst_exponent__h1568 =
	     rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d39 ?
	       _theResult___fst_exponent__h1565 :
	       4'd0 ;
  assign _theResult___fst_exponent__h1580 =
	     (rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCAT_r_ETC___d31 ||
	      rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d33 ||
	      rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d35 ||
	      rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d37) ?
	       4'd0 :
	       _theResult___fst_exponent__h1568 ;
  assign _theResult___fst_mantissa__h1569 =
	     rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d39 ?
	       _theResult___fst_mantissa__h1566 :
	       3'd0 ;
  assign _theResult___fst_mantissa__h1572 =
	     rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d37 ?
	       _theResult___fst_mantissa__h1447 :
	       _theResult___fst_mantissa__h1569 ;
  assign _theResult___fst_mantissa__h1575 =
	     rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d35 ?
	       _theResult___fst_mantissa__h1219 :
	       _theResult___fst_mantissa__h1572 ;
  assign _theResult___fst_mantissa__h1578 =
	     rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d33 ?
	       _theResult___fst_mantissa__h989 :
	       _theResult___fst_mantissa__h1575 ;
  assign _theResult___fst_mantissa__h1581 =
	     rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCAT_r_ETC___d31 ?
	       3'd0 :
	       _theResult___fst_mantissa__h1578 ;
  assign _theResult___fst_overflow__h717 =
	     temp__h628 == 7'd127 || lv_flags_overflow__h232 ;
  assign _theResult___fst_overflow__h722 =
	     rg_fp32[19] ?
	       _theResult___fst_overflow__h717 :
	       lv_flags_overflow__h232 ;
  assign _theResult___snd_denormal__h604 =
	     rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d39 &&
	     (rg_fp32[22:20] == 3'b0 || rg_fp32[22:20] == 3'b001 ||
	      rg_fp32[22:20] == 3'b010 ||
	      rg_fp32[22:20] == 3'b011) ;
  assign _theResult___snd_denormal__h609 =
	     rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d37 ||
	     _theResult___snd_denormal__h604 ;
  assign _theResult___snd_denormal__h614 =
	     rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d35 ||
	     _theResult___snd_denormal__h609 ;
  assign _theResult___snd_denormal__h619 =
	     rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d33 ||
	     _theResult___snd_denormal__h614 ;
  assign _theResult___snd_denormal__h726 =
	     rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCAT_r_ETC___d29 &&
	     !rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCAT_r_ETC___d31 &&
	     _theResult___snd_denormal__h619 ;
  assign _theResult___snd_denormal__h731 =
	     rg_fp32[30:23] != 8'd255 &&
	     (rg_fp32_BITS_30_TO_23_ULE_IF_rg_bias_2_ULE_15__ETC___d21 ||
	      rg_fp32[22:20] != 3'b111) &&
	     _theResult___snd_denormal__h726 ;
  assign exponent_overflow_limit__h185 =
	     (rg_bias <= 6'd15) ? 8'd127 + y__h319 : 8'd127 - y__h346 ;
  assign exponent_underflow_limit__h186 = 8'd128 - y__h686 ;
  assign lv_flags_overflow__h232 =
	     !rg_fp32_BITS_30_TO_23_ULE_IF_rg_bias_2_ULE_15__ETC___d21 &&
	     rg_fp32[22:20] == 3'b111 ;
  assign rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d33 =
	     rg_fp32[30:23] ==
	     _128_MINUS_0_CONCAT_rg_bias_2_7_8_MINUS_4___d30 ;
  assign rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d35 =
	     rg_fp32[30:23] == exponent_underflow_limit__h186 - 8'd3 ;
  assign rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d37 =
	     rg_fp32[30:23] == exponent_underflow_limit__h186 - 8'd2 ;
  assign rg_fp32_BITS_30_TO_23_EQ_128_MINUS_0_CONCAT_rg_ETC___d39 =
	     rg_fp32[30:23] == exponent_underflow_limit__h186 - 8'd1 ;
  assign rg_fp32_BITS_30_TO_23_ULE_IF_rg_bias_2_ULE_15__ETC___d21 =
	     rg_fp32[30:23] <= exponent_overflow_limit__h185 ;
  assign rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCAT_r_ETC___d29 =
	     rg_fp32[30:23] < exponent_underflow_limit__h186 ;
  assign rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCAT_r_ETC___d31 =
	     rg_fp32[30:23] <
	     _128_MINUS_0_CONCAT_rg_bias_2_7_8_MINUS_4___d30 ;
  assign temp___1__h661 = temp__h628 + 7'd1 ;
  assign temp__h628 = { x__h669[3:0], rg_fp32[22:20] } ;
  assign x__h326 = 6'd15 - rg_bias ;
  assign x__h347 = rg_bias - 6'd15 ;
  assign x__h669 = x__h685 + y__h686 ;
  assign x__h685 = rg_fp32[30:23] - 8'd127 ;
  assign x__h740 =
	     (rg_fp32[30:23] != 8'd0 || rg_fp32[22:0] != 23'd0) &&
	     _theResult___snd_denormal__h731 ;
  assign x__h745 =
	     (rg_fp32[30:23] == 8'd0 && rg_fp32[22:0] == 23'd0 ||
	      rg_fp32[30:23] == 8'd255 ||
	      lv_flags_overflow__h232 ||
	      rg_fp32_BITS_30_TO_23_ULT_128_MINUS_0_CONCAT_r_ETC___d29) ?
	       lv_flags_overflow__h232 :
	       _theResult___fst_overflow__h722 ;
  assign y__h319 = { 2'd0, x__h326 } ;
  assign y__h346 = { 2'd0, x__h347 } ;
  assign y__h686 = { 2'd0, rg_bias } ;
  always@(rg_fp32)
  begin
    case (rg_fp32[22:20])
      3'b0, 3'b001, 3'b010, 3'b011: _theResult___fst_mantissa__h989 = 3'b001;
      3'b100, 3'b101, 3'b110, 3'b111:
	  _theResult___fst_mantissa__h989 = 3'b010;
    endcase
  end
  always@(rg_fp32)
  begin
    case (rg_fp32[22:20])
      3'b0, 3'b001: _theResult___fst_mantissa__h1219 = 3'b010;
      3'b010, 3'b011, 3'b100, 3'b101:
	  _theResult___fst_mantissa__h1219 = 3'b011;
      3'b110, 3'b111: _theResult___fst_mantissa__h1219 = 3'b100;
    endcase
  end
  always@(rg_fp32)
  begin
    case (rg_fp32[22:20])
      3'b0: _theResult___fst_mantissa__h1447 = 3'b100;
      3'b001, 3'b010: _theResult___fst_mantissa__h1447 = 3'b101;
      3'b011, 3'b100: _theResult___fst_mantissa__h1447 = 3'b110;
      3'b101, 3'b110, 3'b111: _theResult___fst_mantissa__h1447 = 3'b111;
    endcase
  end
  always@(rg_fp32)
  begin
    case (rg_fp32[22:20])
      3'b0, 3'b001, 3'b010, 3'b011: _theResult___fst_exponent__h1565 = 4'd0;
      3'b100, 3'b101, 3'b110, 3'b111: _theResult___fst_exponent__h1565 = 4'd1;
    endcase
  end
  always@(rg_fp32)
  begin
    case (rg_fp32[22:20])
      3'b0, 3'b001, 3'b010, 3'b011: _theResult___fst_mantissa__h1566 = 3'b111;
      default: _theResult___fst_mantissa__h1566 = 3'b0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_bias <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_cfloat143 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_flags <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_fp32 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (rg_bias$EN) rg_bias <= `BSV_ASSIGNMENT_DELAY rg_bias$D_IN;
	if (rg_cfloat143$EN)
	  rg_cfloat143 <= `BSV_ASSIGNMENT_DELAY rg_cfloat143$D_IN;
	if (rg_flags$EN) rg_flags <= `BSV_ASSIGNMENT_DELAY rg_flags$D_IN;
	if (rg_fp32$EN) rg_fp32 <= `BSV_ASSIGNMENT_DELAY rg_fp32$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_bias = 6'h2A;
    rg_cfloat143 = 8'hAA;
    rg_flags = 5'h0A;
    rg_fp32 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mk_fp32_cfloat143

