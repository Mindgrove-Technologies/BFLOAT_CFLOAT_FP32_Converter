
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Reading SCL library '/home/kapil/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib' as a blackboxâ¦

1. Executing Liberty frontend: /home/kapil/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v
Parsing SystemVerilog input from `/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v' to AST representation.
Warning: Encountered `translate_off' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using a portable and standards-compliant construct such as `ifdef is recommended!
Generating RTLIL representation for module `\mk_cfloat143_fp32'.
Note: Assuming pure combinatorial block at /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:152.3-161.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:162.3-179.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:180.3-199.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_17-34-03/05-yosys-synthesis/hierarchy.dot'.
Dumping module mk_cfloat143_fp32 to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \mk_cfloat143_fp32

4.2. Analyzing design hierarchy..
Top module:  \mk_cfloat143_fp32
Removed 0 unused modules.
Renaming module mk_cfloat143_fp32 to mk_cfloat143_fp32.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \mk_cfloat143_fp32

5.2. Analyzing design hierarchy..
Top module:  \mk_cfloat143_fp32
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:203$23 in module mk_cfloat143_fp32.
Marked 1 switch rules as full_case in process $proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:180$22 in module mk_cfloat143_fp32.
Removed 1 dead cases from process $proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:162$20 in module mk_cfloat143_fp32.
Marked 1 switch rules as full_case in process $proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:162$20 in module mk_cfloat143_fp32.
Marked 1 switch rules as full_case in process $proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:152$19 in module mk_cfloat143_fp32.
Removed a total of 1 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 3 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~8 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:203$23'.
     1/4: $0\rg_fp32[31:0]
     2/4: $0\rg_flags[4:0]
     3/4: $0\rg_cfloat143[7:0]
     4/4: $0\rg_bias[5:0]
Creating decoders for process `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:180$22'.
     1/1: $1\CASE_rg_cfloat143_BITS_2_TO_0_0b11_4194304_0b1_ETC__q1[22:0]
Creating decoders for process `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:162$20'.
     1/1: $1\IF_rg_cfloat143_BITS_2_TO_0_EQ_0b111_4_OR_rg_c_ETC___d33[7:0]
Creating decoders for process `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:152$19'.
     1/1: $1\_theResult_____2_mantissa__h350[22:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\mk_cfloat143_fp32.\CASE_rg_cfloat143_BITS_2_TO_0_0b11_4194304_0b1_ETC__q1' from process `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:180$22'.
No latch inferred for signal `\mk_cfloat143_fp32.\IF_rg_cfloat143_BITS_2_TO_0_EQ_0b111_4_OR_rg_c_ETC___d33' from process `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:162$20'.
No latch inferred for signal `\mk_cfloat143_fp32.\_theResult_____2_mantissa__h350' from process `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:152$19'.

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\mk_cfloat143_fp32.\rg_bias' using process `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:203$23'.
  created $dff cell `$procdff$60' with positive edge clock.
Creating register for signal `\mk_cfloat143_fp32.\rg_cfloat143' using process `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:203$23'.
  created $dff cell `$procdff$61' with positive edge clock.
Creating register for signal `\mk_cfloat143_fp32.\rg_flags' using process `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:203$23'.
  created $dff cell `$procdff$62' with positive edge clock.
Creating register for signal `\mk_cfloat143_fp32.\rg_fp32' using process `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:203$23'.
  created $dff cell `$procdff$63' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:203$23'.
Removing empty process `mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:203$23'.
Found and cleaned up 1 empty switch in `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:180$22'.
Removing empty process `mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:180$22'.
Found and cleaned up 1 empty switch in `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:162$20'.
Removing empty process `mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:162$20'.
Found and cleaned up 1 empty switch in `\mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:152$19'.
Removing empty process `mk_cfloat143_fp32.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:152$19'.
Cleaned up 8 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module mk_cfloat143_fp32...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.
<suppressed ~16 debug messages>

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..
Removed 6 unused cells and 39 unused wires.
<suppressed ~8 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_cfloat143_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/3 on $pmux $procmux$57.
    dead port 2/3 on $pmux $procmux$57.
    dead port 1/2 on $mux $ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:144$15.
Removed 3 multiplexer ports.
<suppressed ~4 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_cfloat143_fp32.
    New ctrl vector for $pmux cell $procmux$46: { $procmux$49_CMP $auto$opt_reduce.cc:134:opt_pmux$65 $procmux$47_CMP }
  Optimizing cells in module \mk_cfloat143_fp32.
Performed a total of 1 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_cfloat143_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_cfloat143_fp32.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_cfloat143_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_cfloat143_fp32.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$63 ($dff) from module mk_cfloat143_fp32 (D = { \rg_cfloat143 [7] \IF_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_rg_cfloat_ETC___d49 [26:20] }, Q = { \rg_fp32 [31] \rg_fp32 [26:20] }, rval = 8'00000000).
Adding SRST signal on $procdff$63 ($dff) from module mk_cfloat143_fp32 (D = \CASE_rg_cfloat143_BITS_2_TO_0_0b11_4194304_0b1_ETC__q1 [19:0], Q = \rg_fp32 [19:0], rval = 20'00000000000000000000).
Adding SRST signal on $procdff$63 ($dff) from module mk_cfloat143_fp32 (D = \IF_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_NOT_rg_cf_ETC___d48 [30:27], Q = \rg_fp32 [30:27], rval = 4'0000).
Adding SRST signal on $procdff$61 ($dff) from module mk_cfloat143_fp32 (D = \convert_cfloat143_fp32_cfloat143_in, Q = \rg_cfloat143, rval = 8'00000000).
Adding SRST signal on $procdff$60 ($dff) from module mk_cfloat143_fp32 (D = \convert_cfloat143_fp32_bias, Q = \rg_bias, rval = 6'000000).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_cfloat143_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_cfloat143_fp32.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

24.16. Rerunning OPT passes. (Maybe there is more to do..)

24.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_cfloat143_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

24.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_cfloat143_fp32.
Performed a total of 0 changes.

24.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
Removed a total of 0 cells.

24.20. Executing OPT_DFF pass (perform DFF optimizations).

24.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..

24.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

24.23. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 31) from mux cell mk_cfloat143_fp32.$ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:137$11 ($mux).
Removed top 6 bits (of 8) from port B of cell mk_cfloat143_fp32.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:141$12 ($sub).
Removed top 6 bits (of 8) from port B of cell mk_cfloat143_fp32.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:142$13 ($sub).
Removed top 1 bits (of 3) from port B of cell mk_cfloat143_fp32.$eq$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:144$14 ($eq).
Removed top 1 bits (of 8) from port B of cell mk_cfloat143_fp32.$add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:147$16 ($add).
Removed top 2 bits (of 8) from port B of cell mk_cfloat143_fp32.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:149$17 ($sub).
Removed top 4 bits (of 8) from port A of cell mk_cfloat143_fp32.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:150$18 ($sub).
Removed top 2 bits (of 8) from port B of cell mk_cfloat143_fp32.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:150$18 ($sub).
Removed top 1 bits (of 8) from port Y of cell mk_cfloat143_fp32.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:150$18 ($sub).
Removed top 5 bits (of 8) from port B of cell mk_cfloat143_fp32.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:171$21 ($sub).
Removed top 1 bits (of 3) from port B of cell mk_cfloat143_fp32.$procmux$53_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell mk_cfloat143_fp32.$procmux$54_CMP0 ($eq).
Removed top 4 bits (of 31) from wire mk_cfloat143_fp32.IF_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_rg_cfloat_ETC___d49.
Removed top 4 bits (of 8) from wire mk_cfloat143_fp32._theResult___snd_exponent__h280.

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mk_cfloat143_fp32:
  creating $macc model for $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:147$16 ($add).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:141$12 ($sub).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:142$13 ($sub).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:149$17 ($sub).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:150$18 ($sub).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:171$21 ($sub).
  creating $alu model for $macc $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:171$21.
  creating $alu model for $macc $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:150$18.
  creating $alu model for $macc $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:149$17.
  creating $alu model for $macc $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:142$13.
  creating $alu model for $macc $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:141$12.
  creating $alu model for $macc $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:147$16.
  creating $alu cell for $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:147$16: $auto$alumacc.cc:485:replace_alu$83
  creating $alu cell for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:141$12: $auto$alumacc.cc:485:replace_alu$86
  creating $alu cell for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:142$13: $auto$alumacc.cc:485:replace_alu$89
  creating $alu cell for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:149$17: $auto$alumacc.cc:485:replace_alu$92
  creating $alu cell for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:150$18: $auto$alumacc.cc:485:replace_alu$95
  creating $alu cell for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:171$21: $auto$alumacc.cc:485:replace_alu$98
  created 6 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_cfloat143_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_cfloat143_fp32.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.
<suppressed ~4 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..
Removed 2 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_cfloat143_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_cfloat143_fp32.
    Consolidated identical input bits for $pmux cell $procmux$46:
      Old ports: A=23'00000000000000000000000, B=69'010000000000000000000001000000000000000000000011000000000000000000000, Y=\CASE_rg_cfloat143_BITS_2_TO_0_0b11_4194304_0b1_ETC__q1
      New ports: A=2'00, B=6'011011, Y=\CASE_rg_cfloat143_BITS_2_TO_0_0b11_4194304_0b1_ETC__q1 [22:21]
      New connections: \CASE_rg_cfloat143_BITS_2_TO_0_0b11_4194304_0b1_ETC__q1 [20:0] = 21'000000000000000000000
  Optimizing cells in module \mk_cfloat143_fp32.
    Consolidated identical input bits for $mux cell $ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:133$7:
      Old ports: A={ \lv_fp32_exponent__h382 \rg_cfloat143 [2:0] 20'00000000000000000000 }, B={ \IF_rg_cfloat143_BITS_2_TO_0_EQ_0b111_4_OR_rg_c_ETC___d33 \CASE_rg_cfloat143_BITS_2_TO_0_0b11_4194304_0b1_ETC__q1 }, Y=\IF_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_NOT_rg_cf_ETC___d48
      New ports: A={ \lv_fp32_exponent__h382 \rg_cfloat143 [2:0] }, B={ \IF_rg_cfloat143_BITS_2_TO_0_EQ_0b111_4_OR_rg_c_ETC___d33 \CASE_rg_cfloat143_BITS_2_TO_0_0b11_4194304_0b1_ETC__q1 [22:21] 1'0 }, Y=\IF_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_NOT_rg_cf_ETC___d48 [30:20]
      New connections: \IF_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_NOT_rg_cf_ETC___d48 [19:0] = 20'00000000000000000000
  Optimizing cells in module \mk_cfloat143_fp32.
    Consolidated identical input bits for $mux cell $ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_cfloat143_fp32.v:137$11:
      Old ports: A=\IF_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_NOT_rg_cf_ETC___d48 [26:0], B={ \rg_cfloat143 [6:0] 20'00000000000000000000 }, Y=\IF_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_rg_cfloat_ETC___d49
      New ports: A=\IF_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_NOT_rg_cf_ETC___d48 [26:20], B=\rg_cfloat143 [6:0], Y=\IF_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_rg_cfloat_ETC___d49 [26:20]
      New connections: \IF_rg_cfloat143_BITS_6_TO_3_EQ_0_AND_rg_cfloat_ETC___d49 [19:0] = 20'00000000000000000000
  Optimizing cells in module \mk_cfloat143_fp32.
Performed a total of 3 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

35.10. Rerunning OPT passes. (Maybe there is more to do..)

35.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_cfloat143_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

35.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_cfloat143_fp32.
Performed a total of 0 changes.

35.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
Removed a total of 0 cells.

35.14. Executing OPT_SHARE pass.

35.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 8 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 9 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 10 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 11 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 12 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 13 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 14 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 15 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 16 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 17 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 18 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.
Setting constant 0-bit at position 19 on $auto$ff.cc:266:slice$67 ($sdff) from module mk_cfloat143_fp32.

35.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

35.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

35.18. Rerunning OPT passes. (Maybe there is more to do..)

35.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_cfloat143_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

35.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_cfloat143_fp32.
Performed a total of 0 changes.

35.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
Removed a total of 0 cells.

35.22. Executing OPT_SHARE pass.

35.23. Executing OPT_DFF pass (perform DFF optimizations).

35.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..

35.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

35.26. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /nix/store/rdd3k15bm7qkhpq4kk4ghkxdqq3zjd1r-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/rdd3k15bm7qkhpq4kk4ghkxdqq3zjd1r-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod$2ab0ff81670440372478bad90d3da37d43208ad1\_90_alu for cells of type $alu.
Using template $paramod$65af072f6065f0ed27ad80c8089003dcba6e1c40\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$10ed987432f06055e5279101f9ec60a49861b43c\_90_alu for cells of type $alu.
Using template $paramod$8749c0efa219d6160b77c501d93e918c0ebd8355\_90_alu for cells of type $alu.
Using template $paramod$a04dd9d4d8b430140c4ff94b50470fb380fda2a0\_90_alu for cells of type $alu.
Using template $paramod$97565c3687be688407d1272a293bd9d0ae6852dc\_90_pmux for cells of type $pmux.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_90_alu for cells of type $alu.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~790 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.
<suppressed ~255 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
<suppressed ~141 debug messages>
Removed a total of 47 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..
Removed 4 unused cells and 326 unused wires.
<suppressed ~5 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\mk_cfloat143_fp32' to `<abc-temp-dir>/input.blif'..
Extracted 247 gates and 262 wires to a netlist network with 14 inputs and 12 outputs.

38.1.1. Executing ABC.
Running ABC command: "/nix/store/p9vsk7iilm6h471bwb1vl688w4r88dg7-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:        1
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               AND cells:        4
ABC RESULTS:               NOT cells:       10
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:                OR cells:       23
ABC RESULTS:               XOR cells:       33
ABC RESULTS:            ANDNOT cells:       87
ABC RESULTS:               MUX cells:       19
ABC RESULTS:        internal signals:      236
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:       12
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.
<suppressed ~10 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..
Removed 1 unused cells and 130 unused wires.
<suppressed ~5 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \mk_cfloat143_fp32

40.2. Analyzing design hierarchy..
Top module:  \mk_cfloat143_fp32
Removed 0 unused modules.

41. Printing statistics.

=== mk_cfloat143_fp32 ===

   Number of wires:                223
   Number of wire bits:            583
   Number of public wires:          33
   Number of public wire bits:     393
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                227
     $_ANDNOT_                      86
     $_AND_                          4
     $_MUX_                         19
     $_NAND_                         1
     $_NOR_                          8
     $_NOT_                          9
     $_ORNOT_                       13
     $_OR_                          23
     $_SDFF_PN0_                    22
     $_SDFF_PP0_                     4
     $_XNOR_                         5
     $_XOR_                         33

42. Executing CHECK pass (checking for obvious problems).
Checking module mk_cfloat143_fp32...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_17-34-03/05-yosys-synthesis/post_techmap.dot'.
Dumping module mk_cfloat143_fp32 to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_cfloat143_fp32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_cfloat143_fp32.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_cfloat143_fp32'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_cfloat143_fp32.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..
Removed 0 unused cells and 21 unused wires.
<suppressed ~21 debug messages>
{
   "creator": "Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\mk_cfloat143_fp32": {
         "num_wires":         202,
         "num_wire_bits":     345,
         "num_pub_wires":     12,
         "num_pub_wire_bits": 155,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         227,
         "num_cells_by_type": {
            "$_ANDNOT_": 86,
            "$_AND_": 4,
            "$_MUX_": 19,
            "$_NAND_": 1,
            "$_NOR_": 8,
            "$_NOT_": 9,
            "$_ORNOT_": 13,
            "$_OR_": 23,
            "$_SDFF_PN0_": 22,
            "$_SDFF_PP0_": 4,
            "$_XNOR_": 5,
            "$_XOR_": 33
         }
      }
   },
      "design": {
         "num_wires":         202,
         "num_wire_bits":     345,
         "num_pub_wires":     12,
         "num_pub_wire_bits": 155,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         227,
         "num_cells_by_type": {
            "$_ANDNOT_": 86,
            "$_AND_": 4,
            "$_MUX_": 19,
            "$_NAND_": 1,
            "$_NOR_": 8,
            "$_NOT_": 9,
            "$_ORNOT_": 13,
            "$_OR_": 23,
            "$_SDFF_PN0_": 22,
            "$_SDFF_PP0_": 4,
            "$_XNOR_": 5,
            "$_XOR_": 33
         }
      }
}

[INFO] Applying latch mapping from '/home/kapil/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â¦

47. Executing TECHMAP pass (map to technology primitives).

47.1. Executing Verilog-2005 frontend: /home/kapil/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/kapil/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

47.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

49. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

49.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\mk_cfloat143_fp32':
  mapped 26 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.
{
   "creator": "Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\mk_cfloat143_fp32": {
         "num_wires":         228,
         "num_wire_bits":     371,
         "num_pub_wires":     12,
         "num_pub_wire_bits": 155,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         253,
         "num_cells_by_type": {
            "$_ANDNOT_": 86,
            "$_AND_": 4,
            "$_MUX_": 45,
            "$_NAND_": 1,
            "$_NOR_": 8,
            "$_NOT_": 9,
            "$_ORNOT_": 13,
            "$_OR_": 23,
            "$_XNOR_": 5,
            "$_XOR_": 33,
            "sky130_fd_sc_hd__dfxtp_2": 26
         }
      }
   },
      "design": {
         "num_wires":         228,
         "num_wire_bits":     371,
         "num_pub_wires":     12,
         "num_pub_wire_bits": 155,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         253,
         "num_cells_by_type": {
            "$_ANDNOT_": 86,
            "$_AND_": 4,
            "$_MUX_": 45,
            "$_NAND_": 1,
            "$_NOR_": 8,
            "$_NOT_": 9,
            "$_ORNOT_": 13,
            "$_OR_": 23,
            "$_XNOR_": 5,
            "$_XOR_": 33,
            "sky130_fd_sc_hd__dfxtp_2": 26
         }
      }
}

[INFO] USING STRATEGY AREA 0

50. Executing ABC pass (technology mapping using ABC).

50.1. Extracting gate netlist of module `\mk_cfloat143_fp32' to `/tmp/yosys-abc-bM9vPZ/input.blif'..
Extracted 227 gates and 257 wires to a netlist network with 29 inputs and 26 outputs.

50.1.1. Executing ABC.
Running ABC command: "/nix/store/p9vsk7iilm6h471bwb1vl688w4r88dg7-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-bM9vPZ/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-bM9vPZ/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-bM9vPZ/input.blif 
ABC: + read_lib -w /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_17-34-03/tmp/2cb2a18da65841838c4d11cb43ae6d28.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_17-34-03/tmp/2cb2a18da65841838c4d11cb43ae6d28.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.15 sec
ABC: Memory =    9.54 MB. Time =     0.15 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_17-34-03/05-yosys-synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_17-34-03/05-yosys-synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 15000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 15000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 6 -S 750.0 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + upsize -D 15000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Current delay (2147.67 ps) does not exceed the target delay (15000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 15000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + stime -p 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =    145 ( 19.3 %)   Cap = 10.7 ff (  4.6 %)   Area =     1199.90 ( 80.7 %)   Delay =  2244.20 ps  ( 16.6 %)               
ABC: Path  0 --      11 : 0    6 pi                       A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =  15.9 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      91 : 3    2 sky130_fd_sc_hd__or3_2   A =   7.51  Df = 492.8 -381.3 ps  S = 102.7 ps  Cin =  1.5 ff  Cout =  10.0 ff  Cmax = 310.4 ff  G =  633  
ABC: Path  2 --      93 : 2    4 sky130_fd_sc_hd__and2_2  A =   7.51  Df = 693.6 -433.8 ps  S =  57.8 ps  Cin =  1.5 ff  Cout =   7.1 ff  Cmax = 303.0 ff  G =  464  
ABC: Path  3 --      94 : 2    1 sky130_fd_sc_hd__or2_2   A =   6.26  Df = 955.5 -551.9 ps  S =  51.6 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 299.4 ff  G =  144  
ABC: Path  4 --      95 : 1    5 sky130_fd_sc_hd__buf_1   A =   3.75  Df =1124.7 -488.2 ps  S = 275.3 ps  Cin =  2.1 ff  Cout =  22.9 ff  Cmax = 130.0 ff  G = 1040  
ABC: Path  5 --     143 : 3    2 sky130_fd_sc_hd__or3_2   A =   7.51  Df =1672.5 -820.2 ps  S = 112.6 ps  Cin =  1.5 ff  Cout =  13.6 ff  Cmax = 310.4 ff  G =  863  
ABC: Path  6 --     161 : 2    1 sky130_fd_sc_hd__xnor2_2 A =  16.27  Df =1829.8 -355.5 ps  S = 100.3 ps  Cin =  8.5 ff  Cout =   2.5 ff  Cmax = 121.8 ff  G =   28  
ABC: Path  7 --     165 : 4    1 sky130_fd_sc_hd__a211o_2 A =  10.01  Df =2012.8  -53.8 ps  S =  45.3 ps  Cin =  2.4 ff  Cout =   2.4 ff  Cmax = 325.0 ff  G =   99  
ABC: Path  8 --     166 : 4    1 sky130_fd_sc_hd__o211a_2 A =  10.01  Df =2244.2  -30.5 ps  S = 203.8 ps  Cin =  2.4 ff  Cout =  33.4 ff  Cmax = 268.3 ff  G = 1415  
ABC: Start-point = pi10 (\rg_bias [2]).  End-point = po9 ($auto$rtlil.cc:2620:MuxGate$1250).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   29/   26  lat =    0  nd =   145  edge =    340  area =1200.06  delay = 8.00  lev = 8
ABC: + write_blif /tmp/yosys-abc-bM9vPZ/output.blif 

50.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       25
ABC RESULTS:        internal signals:      202
ABC RESULTS:           input signals:       29
ABC RESULTS:          output signals:       26
Removing temp directory.

51. Executing SETUNDEF pass (replace undef values with defined constants).

52. Executing HILOMAP pass (mapping to constant drivers).
Warning: Selection "sky130_fd_sc_hd__conb_1" did not match any module.
Warning: Selection "LO" did not match any object.

53. Executing SPLITNETS pass (splitting up multi-bit signals).

54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_cfloat143_fp32..
Removed 0 unused cells and 338 unused wires.
<suppressed ~94 debug messages>

55. Executing INSBUF pass (insert buffer cells for connected wires).
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1429: 1'0 -> \get_fp32 [0]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1430: 1'0 -> \get_fp32 [1]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1431: 1'0 -> \get_fp32 [2]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1432: 1'0 -> \get_fp32 [3]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1433: 1'0 -> \get_fp32 [4]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1434: 1'0 -> \get_fp32 [5]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1435: 1'0 -> \get_fp32 [6]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1436: 1'0 -> \get_fp32 [7]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1437: 1'0 -> \get_fp32 [8]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1438: 1'0 -> \get_fp32 [9]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1439: 1'0 -> \get_fp32 [10]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1440: 1'0 -> \get_fp32 [11]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1441: 1'0 -> \get_fp32 [12]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1442: 1'0 -> \get_fp32 [13]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1443: 1'0 -> \get_fp32 [14]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1444: 1'0 -> \get_fp32 [15]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1445: 1'0 -> \get_fp32 [16]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1446: 1'0 -> \get_fp32 [17]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1447: 1'0 -> \get_fp32 [18]
Add mk_cfloat143_fp32/$auto$insbuf.cc:97:execute$1448: 1'0 -> \get_fp32 [19]

56. Executing CHECK pass (checking for obvious problems).
Checking module mk_cfloat143_fp32...
Found and reported 0 problems.
{
   "creator": "Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\mk_cfloat143_fp32": {
         "num_wires":         164,
         "num_wire_bits":     207,
         "num_pub_wires":     19,
         "num_pub_wire_bits": 62,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         191,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211o_2": 6,
            "sky130_fd_sc_hd__a21boi_2": 1,
            "sky130_fd_sc_hd__a21o_2": 2,
            "sky130_fd_sc_hd__a21oi_2": 3,
            "sky130_fd_sc_hd__a22o_2": 2,
            "sky130_fd_sc_hd__a2bb2o_2": 1,
            "sky130_fd_sc_hd__a311o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 1,
            "sky130_fd_sc_hd__and2_2": 19,
            "sky130_fd_sc_hd__and2b_2": 7,
            "sky130_fd_sc_hd__and3_2": 4,
            "sky130_fd_sc_hd__buf_1": 25,
            "sky130_fd_sc_hd__buf_2": 20,
            "sky130_fd_sc_hd__dfxtp_2": 26,
            "sky130_fd_sc_hd__inv_2": 3,
            "sky130_fd_sc_hd__mux2_2": 2,
            "sky130_fd_sc_hd__nand2_2": 7,
            "sky130_fd_sc_hd__nor2_2": 6,
            "sky130_fd_sc_hd__nor3b_2": 1,
            "sky130_fd_sc_hd__nor4_2": 1,
            "sky130_fd_sc_hd__o211a_2": 7,
            "sky130_fd_sc_hd__o21a_2": 3,
            "sky130_fd_sc_hd__o21ai_2": 5,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__or2_2": 3,
            "sky130_fd_sc_hd__or2b_2": 7,
            "sky130_fd_sc_hd__or3_2": 7,
            "sky130_fd_sc_hd__or3b_2": 3,
            "sky130_fd_sc_hd__or4_2": 3,
            "sky130_fd_sc_hd__xnor2_2": 11,
            "sky130_fd_sc_hd__xor2_2": 3
         }
      }
   },
      "design": {
         "num_wires":         164,
         "num_wire_bits":     207,
         "num_pub_wires":     19,
         "num_pub_wire_bits": 62,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         191,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211o_2": 6,
            "sky130_fd_sc_hd__a21boi_2": 1,
            "sky130_fd_sc_hd__a21o_2": 2,
            "sky130_fd_sc_hd__a21oi_2": 3,
            "sky130_fd_sc_hd__a22o_2": 2,
            "sky130_fd_sc_hd__a2bb2o_2": 1,
            "sky130_fd_sc_hd__a311o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 1,
            "sky130_fd_sc_hd__and2_2": 19,
            "sky130_fd_sc_hd__and2b_2": 7,
            "sky130_fd_sc_hd__and3_2": 4,
            "sky130_fd_sc_hd__buf_1": 25,
            "sky130_fd_sc_hd__buf_2": 20,
            "sky130_fd_sc_hd__dfxtp_2": 26,
            "sky130_fd_sc_hd__inv_2": 3,
            "sky130_fd_sc_hd__mux2_2": 2,
            "sky130_fd_sc_hd__nand2_2": 7,
            "sky130_fd_sc_hd__nor2_2": 6,
            "sky130_fd_sc_hd__nor3b_2": 1,
            "sky130_fd_sc_hd__nor4_2": 1,
            "sky130_fd_sc_hd__o211a_2": 7,
            "sky130_fd_sc_hd__o21a_2": 3,
            "sky130_fd_sc_hd__o21ai_2": 5,
            "sky130_fd_sc_hd__o31ai_2": 1,
            "sky130_fd_sc_hd__or2_2": 3,
            "sky130_fd_sc_hd__or2b_2": 7,
            "sky130_fd_sc_hd__or3_2": 7,
            "sky130_fd_sc_hd__or3b_2": 3,
            "sky130_fd_sc_hd__or4_2": 3,
            "sky130_fd_sc_hd__xnor2_2": 11,
            "sky130_fd_sc_hd__xor2_2": 3
         }
      }
}

57. Executing Verilog backend.
Dumping module `\mk_cfloat143_fp32'.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 0103007996, CPU: user 1.08s system 0.05s, MEM: 48.88 MB peak
Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)
Time spent: 51% 2x abc (1 sec), 11% 2x read_liberty (0 sec), ...
