
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Reading SCL library '/home/kapil/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib' as a blackboxâ¦

1. Executing Liberty frontend: /home/kapil/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v
Parsing SystemVerilog input from `/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v' to AST representation.
Warning: Encountered `translate_off' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using a portable and standards-compliant construct such as `ifdef is recommended!
Generating RTLIL representation for module `\mk_fp32_bfloat16'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_16-10-05/05-yosys-synthesis/hierarchy.dot'.
Dumping module mk_fp32_bfloat16 to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \mk_fp32_bfloat16

4.2. Analyzing design hierarchy..
Top module:  \mk_fp32_bfloat16
Removed 0 unused modules.
Renaming module mk_fp32_bfloat16 to mk_fp32_bfloat16.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \mk_fp32_bfloat16

5.2. Analyzing design hierarchy..
Top module:  \mk_fp32_bfloat16
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:132$34 in module mk_fp32_bfloat16.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~4 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\mk_fp32_bfloat16.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:132$34'.
     1/3: $0\rg_fp32[31:0]
     2/3: $0\rg_flags[4:0]
     3/3: $0\rg_bfloat16[15:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\mk_fp32_bfloat16.\rg_bfloat16' using process `\mk_fp32_bfloat16.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:132$34'.
  created $dff cell `$procdff$51' with positive edge clock.
Creating register for signal `\mk_fp32_bfloat16.\rg_flags' using process `\mk_fp32_bfloat16.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:132$34'.
  created $dff cell `$procdff$52' with positive edge clock.
Creating register for signal `\mk_fp32_bfloat16.\rg_fp32' using process `\mk_fp32_bfloat16.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:132$34'.
  created $dff cell `$procdff$53' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\mk_fp32_bfloat16.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:132$34'.
Removing empty process `mk_fp32_bfloat16.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:132$34'.
Cleaned up 4 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module mk_fp32_bfloat16...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.
<suppressed ~14 debug messages>

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..
Removed 3 unused cells and 21 unused wires.
<suppressed ~5 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_bfloat16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_bfloat16.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_bfloat16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_bfloat16.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_bfloat16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_bfloat16.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$53 ($dff) from module mk_fp32_bfloat16 (D = \fp32_in_fp_in, Q = \rg_fp32, rval = 0).
Adding SRST signal on $procdff$51 ($dff) from module mk_fp32_bfloat16 (D = \rg_fp32 [31], Q = \rg_bfloat16 [15], rval = 1'0).
Adding SRST signal on $procdff$51 ($dff) from module mk_fp32_bfloat16 (D = $ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:116$17_Y, Q = \rg_bfloat16 [14:7], rval = 8'00000000).
Adding SRST signal on $procdff$51 ($dff) from module mk_fp32_bfloat16 (D = { $ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:124$32_Y [6] $ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:124$32_Y [0] }, Q = { \rg_bfloat16 [6] \rg_bfloat16 [0] }, rval = 2'00).
Adding SRST signal on $procdff$51 ($dff) from module mk_fp32_bfloat16 (D = \IF_rg_fp32_BIT_16_2_AND_rg_fp32_BIT_15_3_4_AND_ETC___d24 [5:1], Q = \rg_bfloat16 [5:1], rval = 5'00000).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..
Removed 4 unused cells and 2 unused wires.
<suppressed ~5 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_bfloat16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_bfloat16.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

24.16. Rerunning OPT passes. (Maybe there is more to do..)

24.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_bfloat16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

24.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_bfloat16.
Performed a total of 0 changes.

24.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
Removed a total of 0 cells.

24.20. Executing OPT_DFF pass (perform DFF optimizations).

24.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..

24.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

24.23. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 14 bits (of 15) from port B of cell mk_fp32_bfloat16.$add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:111$8 ($add).
Removed top 14 bits (of 15) from port B of cell mk_fp32_bfloat16.$add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:112$9 ($add).

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mk_fp32_bfloat16:
  creating $macc model for $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:111$8 ($add).
  creating $macc model for $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:112$9 ($add).
  creating $alu model for $macc $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:112$9.
  creating $alu model for $macc $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:111$8.
  creating $alu cell for $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:111$8: $auto$alumacc.cc:485:replace_alu$71
  creating $alu cell for $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_bfloat16.v:112$9: $auto$alumacc.cc:485:replace_alu$74
  created 2 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_bfloat16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_bfloat16.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.
<suppressed ~8 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_bfloat16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_bfloat16.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

35.10. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /nix/store/rdd3k15bm7qkhpq4kk4ghkxdqq3zjd1r-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/rdd3k15bm7qkhpq4kk4ghkxdqq3zjd1r-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$3b7577489eb4433b1d5620cab7f3794743dee5ea\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001111 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~370 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.
<suppressed ~166 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
<suppressed ~111 debug messages>
Removed a total of 37 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..
Removed 31 unused cells and 126 unused wires.
<suppressed ~32 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\mk_fp32_bfloat16' to `<abc-temp-dir>/input.blif'..
Extracted 183 gates and 217 wires to a netlist network with 32 inputs and 18 outputs.

38.1.1. Executing ABC.
Running ABC command: "/nix/store/p9vsk7iilm6h471bwb1vl688w4r88dg7-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               NOT cells:       20
ABC RESULTS:               AND cells:        4
ABC RESULTS:              NAND cells:       12
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:            ANDNOT cells:       35
ABC RESULTS:               XOR cells:       29
ABC RESULTS:               MUX cells:       29
ABC RESULTS:               NOR cells:        3
ABC RESULTS:                OR cells:       50
ABC RESULTS:        internal signals:      167
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       18
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..
Removed 0 unused cells and 106 unused wires.
<suppressed ~4 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \mk_fp32_bfloat16

40.2. Analyzing design hierarchy..
Top module:  \mk_fp32_bfloat16
Removed 0 unused modules.

41. Printing statistics.

=== mk_fp32_bfloat16 ===

   Number of wires:                205
   Number of wire bits:            374
   Number of public wires:          19
   Number of public wire bits:     188
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                239
     $_ANDNOT_                      35
     $_AND_                          4
     $_MUX_                         29
     $_NAND_                        12
     $_NOR_                          3
     $_NOT_                         20
     $_ORNOT_                        8
     $_OR_                          50
     $_SDFF_PN0_                    33
     $_SDFF_PP0_                    15
     $_XNOR_                         1
     $_XOR_                         29

42. Executing CHECK pass (checking for obvious problems).
Checking module mk_fp32_bfloat16...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_16-10-05/05-yosys-synthesis/post_techmap.dot'.
Dumping module mk_fp32_bfloat16 to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_bfloat16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_bfloat16.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_bfloat16'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_bfloat16.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..
Removed 0 unused cells and 12 unused wires.
<suppressed ~12 debug messages>
{
   "creator": "Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\mk_fp32_bfloat16": {
         "num_wires":         193,
         "num_wire_bits":     299,
         "num_pub_wires":     7,
         "num_pub_wire_bits": 113,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         239,
         "num_cells_by_type": {
            "$_ANDNOT_": 35,
            "$_AND_": 4,
            "$_MUX_": 29,
            "$_NAND_": 12,
            "$_NOR_": 3,
            "$_NOT_": 20,
            "$_ORNOT_": 8,
            "$_OR_": 50,
            "$_SDFF_PN0_": 33,
            "$_SDFF_PP0_": 15,
            "$_XNOR_": 1,
            "$_XOR_": 29
         }
      }
   },
      "design": {
         "num_wires":         193,
         "num_wire_bits":     299,
         "num_pub_wires":     7,
         "num_pub_wire_bits": 113,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         239,
         "num_cells_by_type": {
            "$_ANDNOT_": 35,
            "$_AND_": 4,
            "$_MUX_": 29,
            "$_NAND_": 12,
            "$_NOR_": 3,
            "$_NOT_": 20,
            "$_ORNOT_": 8,
            "$_OR_": 50,
            "$_SDFF_PN0_": 33,
            "$_SDFF_PP0_": 15,
            "$_XNOR_": 1,
            "$_XOR_": 29
         }
      }
}

[INFO] Applying latch mapping from '/home/kapil/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â¦

47. Executing TECHMAP pass (map to technology primitives).

47.1. Executing Verilog-2005 frontend: /home/kapil/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/kapil/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

47.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

49. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

49.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\mk_fp32_bfloat16':
  mapped 48 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.
{
   "creator": "Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\mk_fp32_bfloat16": {
         "num_wires":         241,
         "num_wire_bits":     347,
         "num_pub_wires":     7,
         "num_pub_wire_bits": 113,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         287,
         "num_cells_by_type": {
            "$_ANDNOT_": 35,
            "$_AND_": 4,
            "$_MUX_": 77,
            "$_NAND_": 12,
            "$_NOR_": 3,
            "$_NOT_": 20,
            "$_ORNOT_": 8,
            "$_OR_": 50,
            "$_XNOR_": 1,
            "$_XOR_": 29,
            "sky130_fd_sc_hd__dfxtp_2": 48
         }
      }
   },
      "design": {
         "num_wires":         241,
         "num_wire_bits":     347,
         "num_pub_wires":     7,
         "num_pub_wire_bits": 113,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         287,
         "num_cells_by_type": {
            "$_ANDNOT_": 35,
            "$_AND_": 4,
            "$_MUX_": 77,
            "$_NAND_": 12,
            "$_NOR_": 3,
            "$_NOT_": 20,
            "$_ORNOT_": 8,
            "$_OR_": 50,
            "$_XNOR_": 1,
            "$_XOR_": 29,
            "sky130_fd_sc_hd__dfxtp_2": 48
         }
      }
}

[INFO] USING STRATEGY AREA 0

50. Executing ABC pass (technology mapping using ABC).

50.1. Extracting gate netlist of module `\mk_fp32_bfloat16' to `/tmp/yosys-abc-pnUYUb/input.blif'..
Extracted 239 gates and 305 wires to a netlist network with 65 inputs and 48 outputs.

50.1.1. Executing ABC.
Running ABC command: "/nix/store/p9vsk7iilm6h471bwb1vl688w4r88dg7-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-pnUYUb/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-pnUYUb/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-pnUYUb/input.blif 
ABC: + read_lib -w /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_16-10-05/tmp/232ed2ea12794e58a6880fe0f1072430.lib 
ABC: Parsing finished successfully.  Parsing time =     0.12 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_16-10-05/tmp/232ed2ea12794e58a6880fe0f1072430.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.19 sec
ABC: Memory =    9.54 MB. Time =     0.19 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_16-10-05/05-yosys-synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_16-10-05/05-yosys-synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 15000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 15000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 6 -S 750.0 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + upsize -D 15000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Current delay (2424.51 ps) does not exceed the target delay (15000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 15000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + stime -p 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =    171 ( 26.9 %)   Cap = 11.0 ff (  6.9 %)   Area =     1271.22 ( 72.5 %)   Delay =  2611.80 ps  (  8.2 %)               
ABC: Path  0 --      14 : 0    1 pi                        A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =   1.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     114 : 4    2 sky130_fd_sc_hd__or4_2    A =   8.76  Df = 650.5 -558.6 ps  S = 103.9 ps  Cin =  1.5 ff  Cout =   4.0 ff  Cmax = 310.4 ff  G =  253  
ABC: Path  2 --     118 : 4    3 sky130_fd_sc_hd__or4_2    A =   8.76  Df =1369.6-1145.0 ps  S = 130.8 ps  Cin =  1.5 ff  Cout =  10.7 ff  Cmax = 310.4 ff  G =  680  
ABC: Path  3 --     231 : 4    3 sky130_fd_sc_hd__and4bb_2 A =  12.51  Df =1736.9-1033.3 ps  S = 100.0 ps  Cin =  1.5 ff  Cout =  11.6 ff  Cmax = 270.1 ff  G =  749  
ABC: Path  4 --     237 : 2    1 sky130_fd_sc_hd__and2_2   A =   7.51  Df =1877.7 -987.5 ps  S =  35.0 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 303.0 ff  G =  143  
ABC: Path  5 --     238 : 1    5 sky130_fd_sc_hd__buf_1    A =   3.75  Df =2119.1-1063.8 ps  S = 283.1 ps  Cin =  2.1 ff  Cout =  23.6 ff  Cmax = 130.0 ff  G = 1075  
ABC: Path  6 --     244 : 2    1 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =2339.8 -664.5 ps  S =  98.2 ps  Cin =  8.5 ff  Cout =   2.6 ff  Cmax = 121.8 ff  G =   28  
ABC: Path  7 --     245 : 3    1 sky130_fd_sc_hd__o21a_2   A =   8.76  Df =2611.8 -305.5 ps  S = 182.3 ps  Cin =  2.4 ff  Cout =  33.4 ff  Cmax = 294.8 ff  G = 1403  
ABC: Start-point = pi13 (\rg_fp32 [5]).  End-point = po38 ($auto$rtlil.cc:2620:MuxGate$1000).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   65/   48  lat =    0  nd =   171  edge =    392  area =1271.32  delay = 7.00  lev = 7
ABC: + write_blif /tmp/yosys-abc-pnUYUb/output.blif 

50.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       39
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       44
ABC RESULTS:        internal signals:      192
ABC RESULTS:           input signals:       65
ABC RESULTS:          output signals:       48
Removing temp directory.

51. Executing SETUNDEF pass (replace undef values with defined constants).

52. Executing HILOMAP pass (mapping to constant drivers).
Warning: Selection "sky130_fd_sc_hd__conb_1" did not match any module.
Warning: Selection "LO" did not match any object.

53. Executing SPLITNETS pass (splitting up multi-bit signals).

54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_bfloat16..
Removed 0 unused cells and 330 unused wires.
<suppressed ~32 debug messages>

55. Executing INSBUF pass (insert buffer cells for connected wires).

56. Executing CHECK pass (checking for obvious problems).
Checking module mk_fp32_bfloat16...
Found and reported 0 problems.
{
   "creator": "Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\mk_fp32_bfloat16": {
         "num_wires":         207,
         "num_wire_bits":     253,
         "num_pub_wires":     36,
         "num_pub_wire_bits": 82,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         219,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211oi_2": 1,
            "sky130_fd_sc_hd__a21bo_2": 1,
            "sky130_fd_sc_hd__a21boi_2": 2,
            "sky130_fd_sc_hd__a21o_2": 1,
            "sky130_fd_sc_hd__a21oi_2": 7,
            "sky130_fd_sc_hd__a2bb2o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 5,
            "sky130_fd_sc_hd__a41o_2": 1,
            "sky130_fd_sc_hd__and2_2": 39,
            "sky130_fd_sc_hd__and2b_2": 1,
            "sky130_fd_sc_hd__and3_2": 10,
            "sky130_fd_sc_hd__and4_2": 6,
            "sky130_fd_sc_hd__and4bb_2": 1,
            "sky130_fd_sc_hd__buf_1": 44,
            "sky130_fd_sc_hd__dfxtp_2": 48,
            "sky130_fd_sc_hd__inv_2": 2,
            "sky130_fd_sc_hd__nand2_2": 5,
            "sky130_fd_sc_hd__nand3_2": 3,
            "sky130_fd_sc_hd__nor2_2": 3,
            "sky130_fd_sc_hd__nor2b_2": 1,
            "sky130_fd_sc_hd__nor3_2": 2,
            "sky130_fd_sc_hd__o211a_2": 2,
            "sky130_fd_sc_hd__o21a_2": 8,
            "sky130_fd_sc_hd__o21ai_2": 3,
            "sky130_fd_sc_hd__o31a_2": 2,
            "sky130_fd_sc_hd__o41a_2": 1,
            "sky130_fd_sc_hd__or2_2": 3,
            "sky130_fd_sc_hd__or3_2": 1,
            "sky130_fd_sc_hd__or4_2": 8,
            "sky130_fd_sc_hd__xnor2_2": 6,
            "sky130_fd_sc_hd__xor2_2": 1
         }
      }
   },
      "design": {
         "num_wires":         207,
         "num_wire_bits":     253,
         "num_pub_wires":     36,
         "num_pub_wire_bits": 82,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         219,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a211oi_2": 1,
            "sky130_fd_sc_hd__a21bo_2": 1,
            "sky130_fd_sc_hd__a21boi_2": 2,
            "sky130_fd_sc_hd__a21o_2": 1,
            "sky130_fd_sc_hd__a21oi_2": 7,
            "sky130_fd_sc_hd__a2bb2o_2": 1,
            "sky130_fd_sc_hd__a31o_2": 5,
            "sky130_fd_sc_hd__a41o_2": 1,
            "sky130_fd_sc_hd__and2_2": 39,
            "sky130_fd_sc_hd__and2b_2": 1,
            "sky130_fd_sc_hd__and3_2": 10,
            "sky130_fd_sc_hd__and4_2": 6,
            "sky130_fd_sc_hd__and4bb_2": 1,
            "sky130_fd_sc_hd__buf_1": 44,
            "sky130_fd_sc_hd__dfxtp_2": 48,
            "sky130_fd_sc_hd__inv_2": 2,
            "sky130_fd_sc_hd__nand2_2": 5,
            "sky130_fd_sc_hd__nand3_2": 3,
            "sky130_fd_sc_hd__nor2_2": 3,
            "sky130_fd_sc_hd__nor2b_2": 1,
            "sky130_fd_sc_hd__nor3_2": 2,
            "sky130_fd_sc_hd__o211a_2": 2,
            "sky130_fd_sc_hd__o21a_2": 8,
            "sky130_fd_sc_hd__o21ai_2": 3,
            "sky130_fd_sc_hd__o31a_2": 2,
            "sky130_fd_sc_hd__o41a_2": 1,
            "sky130_fd_sc_hd__or2_2": 3,
            "sky130_fd_sc_hd__or3_2": 1,
            "sky130_fd_sc_hd__or4_2": 8,
            "sky130_fd_sc_hd__xnor2_2": 6,
            "sky130_fd_sc_hd__xor2_2": 1
         }
      }
}

57. Executing Verilog backend.
Dumping module `\mk_fp32_bfloat16'.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 2dbbdeece7, CPU: user 0.97s system 0.04s, MEM: 48.50 MB peak
Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)
Time spent: 50% 2x abc (0 sec), 14% 2x read_liberty (0 sec), ...
