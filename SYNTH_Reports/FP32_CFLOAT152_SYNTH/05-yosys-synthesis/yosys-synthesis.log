
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.
Reading SCL library '/home/kapil/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib' as a blackboxâ¦

1. Executing Liberty frontend: /home/kapil/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v
Parsing SystemVerilog input from `/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v' to AST representation.
Warning: Encountered `translate_off' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using a portable and standards-compliant construct such as `ifdef is recommended!
Generating RTLIL representation for module `\mk_fp32_cfloat152'.
Note: Assuming pure combinatorial block at /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:291.3-297.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_16-39-46/05-yosys-synthesis/hierarchy.dot'.
Dumping module mk_fp32_cfloat152 to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \mk_fp32_cfloat152

4.2. Analyzing design hierarchy..
Top module:  \mk_fp32_cfloat152
Removed 0 unused modules.
Renaming module mk_fp32_cfloat152 to mk_fp32_cfloat152.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \mk_fp32_cfloat152

5.2. Analyzing design hierarchy..
Top module:  \mk_fp32_cfloat152
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:301$102 in module mk_fp32_cfloat152.
Marked 1 switch rules as full_case in process $proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:291$101 in module mk_fp32_cfloat152.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~6 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\mk_fp32_cfloat152.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:301$102'.
     1/4: $0\rg_fp32[31:0]
     2/4: $0\rg_flags[4:0]
     3/4: $0\rg_cfloat152[7:0]
     4/4: $0\rg_bias[5:0]
Creating decoders for process `\mk_fp32_cfloat152.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:291$101'.
     1/1: $1\_theResult___fst_mantissa__h539[1:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\mk_fp32_cfloat152.\_theResult___fst_mantissa__h539' from process `\mk_fp32_cfloat152.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:291$101'.

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\mk_fp32_cfloat152.\rg_bias' using process `\mk_fp32_cfloat152.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:301$102'.
  created $dff cell `$procdff$127' with positive edge clock.
Creating register for signal `\mk_fp32_cfloat152.\rg_cfloat152' using process `\mk_fp32_cfloat152.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:301$102'.
  created $dff cell `$procdff$128' with positive edge clock.
Creating register for signal `\mk_fp32_cfloat152.\rg_flags' using process `\mk_fp32_cfloat152.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:301$102'.
  created $dff cell `$procdff$129' with positive edge clock.
Creating register for signal `\mk_fp32_cfloat152.\rg_fp32' using process `\mk_fp32_cfloat152.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:301$102'.
  created $dff cell `$procdff$130' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\mk_fp32_cfloat152.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:301$102'.
Removing empty process `mk_fp32_cfloat152.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:301$102'.
Found and cleaned up 1 empty switch in `\mk_fp32_cfloat152.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:291$101'.
Removing empty process `mk_fp32_cfloat152.$proc$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:291$101'.
Cleaned up 6 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module mk_fp32_cfloat152...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.
<suppressed ~22 debug messages>

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..
Removed 43 unused cells and 97 unused wires.
<suppressed ~51 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_cfloat152..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_cfloat152.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_cfloat152..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_cfloat152.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_cfloat152..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_cfloat152.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$130 ($dff) from module mk_fp32_cfloat152 (D = \fp32_in_fp_in, Q = \rg_fp32, rval = 0).
Adding SRST signal on $procdff$128 ($dff) from module mk_fp32_cfloat152 (D = \rg_fp32 [31], Q = \rg_cfloat152 [7], rval = 1'0).
Adding SRST signal on $procdff$128 ($dff) from module mk_fp32_cfloat152 (D = $ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:170$12_Y, Q = \rg_cfloat152 [6:0], rval = 7'0000000).
Adding SRST signal on $procdff$127 ($dff) from module mk_fp32_cfloat152 (D = \bias_in_bias, Q = \rg_bias, rval = 6'000000).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..
Removed 4 unused cells and 4 unused wires.
<suppressed ~6 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_cfloat152..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_cfloat152.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 5 bits (of 8) from port B of cell mk_fp32_cfloat152.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:179$16 ($sub).
Removed top 1 bits (of 2) from port B of cell mk_fp32_cfloat152.$eq$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:182$18 ($eq).
Removed top 4 bits (of 5) from mux cell mk_fp32_cfloat152.$ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:181$22 ($mux).
Removed top 4 bits (of 5) from mux cell mk_fp32_cfloat152.$ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:186$23 ($mux).
Removed top 4 bits (of 5) from mux cell mk_fp32_cfloat152.$ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:190$27 ($mux).
Removed top 1 bits (of 2) from mux cell mk_fp32_cfloat152.$ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:197$29 ($mux).
Removed top 1 bits (of 6) from port B of cell mk_fp32_cfloat152.$le$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:243$53 ($le).
Removed top 1 bits (of 8) from port A of cell mk_fp32_cfloat152.$add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:243$54 ($add).
Removed top 2 bits (of 8) from port B of cell mk_fp32_cfloat152.$add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:243$54 ($add).
Removed top 1 bits (of 8) from port A of cell mk_fp32_cfloat152.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:243$55 ($sub).
Removed top 2 bits (of 8) from port B of cell mk_fp32_cfloat152.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:243$55 ($sub).
Removed top 2 bits (of 8) from port B of cell mk_fp32_cfloat152.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:244$57 ($sub).
Removed top 6 bits (of 8) from port B of cell mk_fp32_cfloat152.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:252$63 ($sub).
Removed top 6 bits (of 8) from port B of cell mk_fp32_cfloat152.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:254$65 ($sub).
Removed top 7 bits (of 8) from port B of cell mk_fp32_cfloat152.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:256$67 ($sub).
Removed top 6 bits (of 7) from port B of cell mk_fp32_cfloat152.$add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:265$73 ($add).
Removed top 1 bits (of 6) from port A of cell mk_fp32_cfloat152.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:267$74 ($sub).
Removed top 1 bits (of 6) from port B of cell mk_fp32_cfloat152.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:268$75 ($sub).
Removed top 2 bits (of 8) from port B of cell mk_fp32_cfloat152.$add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:269$76 ($add).
Removed top 3 bits (of 8) from port Y of cell mk_fp32_cfloat152.$add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:269$76 ($add).
Removed top 3 bits (of 8) from port A of cell mk_fp32_cfloat152.$add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:269$76 ($add).
Removed top 1 bits (of 6) from port B of cell mk_fp32_cfloat152.$add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:269$76 ($add).
Removed top 1 bits (of 8) from port B of cell mk_fp32_cfloat152.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:270$77 ($sub).
Removed top 3 bits (of 8) from port Y of cell mk_fp32_cfloat152.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:270$77 ($sub).
Removed top 3 bits (of 8) from port A of cell mk_fp32_cfloat152.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:270$77 ($sub).
Removed top 2 bits (of 7) from port B of cell mk_fp32_cfloat152.$sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:270$77 ($sub).
Removed top 4 bits (of 5) from wire mk_fp32_cfloat152._theResult___fst_exponent__h681.
Removed top 4 bits (of 5) from wire mk_fp32_cfloat152._theResult___fst_exponent__h699.
Removed top 3 bits (of 8) from wire mk_fp32_cfloat152.x__h800.

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mk_fp32_cfloat152:
  creating $macc model for $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:243$54 ($add).
  creating $macc model for $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:265$73 ($add).
  creating $macc model for $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:269$76 ($add).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:179$16 ($sub).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:243$55 ($sub).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:244$57 ($sub).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:252$63 ($sub).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:254$65 ($sub).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:256$67 ($sub).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:267$74 ($sub).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:268$75 ($sub).
  creating $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:270$77 ($sub).
  merging $macc model for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:270$77 into $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:269$76.
  creating $alu model for $macc $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:268$75.
  creating $alu model for $macc $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:267$74.
  creating $alu model for $macc $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:256$67.
  creating $alu model for $macc $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:254$65.
  creating $alu model for $macc $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:252$63.
  creating $alu model for $macc $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:244$57.
  creating $alu model for $macc $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:243$55.
  creating $alu model for $macc $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:179$16.
  creating $alu model for $macc $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:265$73.
  creating $alu model for $macc $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:243$54.
  creating $macc cell for $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:269$76: $auto$alumacc.cc:365:replace_macc$142
  creating $alu model for $le$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:243$53 ($le): merged with $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:267$74.
  creating $alu model for $le$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:260$70 ($le): new $alu
  creating $alu model for $lt$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:262$71 ($lt): new $alu
  creating $alu model for $lt$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:264$72 ($lt): new $alu
  creating $alu model for $eq$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:250$62 ($eq): merged with $lt$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:262$71.
  creating $alu model for $eq$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:258$69 ($eq): merged with $le$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:260$70.
  creating $alu cell for $lt$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:264$72: $auto$alumacc.cc:485:replace_alu$146
  creating $alu cell for $lt$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:262$71, $eq$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:250$62: $auto$alumacc.cc:485:replace_alu$151
  creating $alu cell for $le$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:260$70, $eq$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:258$69: $auto$alumacc.cc:485:replace_alu$158
  creating $alu cell for $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:243$54: $auto$alumacc.cc:485:replace_alu$167
  creating $alu cell for $add$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:265$73: $auto$alumacc.cc:485:replace_alu$170
  creating $alu cell for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:179$16: $auto$alumacc.cc:485:replace_alu$173
  creating $alu cell for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:243$55: $auto$alumacc.cc:485:replace_alu$176
  creating $alu cell for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:244$57: $auto$alumacc.cc:485:replace_alu$179
  creating $alu cell for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:252$63: $auto$alumacc.cc:485:replace_alu$182
  creating $alu cell for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:254$65: $auto$alumacc.cc:485:replace_alu$185
  creating $alu cell for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:256$67: $auto$alumacc.cc:485:replace_alu$188
  creating $alu cell for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:267$74, $le$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:243$53: $auto$alumacc.cc:485:replace_alu$191
  creating $alu cell for $sub$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:268$75: $auto$alumacc.cc:485:replace_alu$204
  created 13 $alu and 1 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.
<suppressed ~2 debug messages>

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_cfloat152..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_cfloat152.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..
Removed 2 unused cells and 11 unused wires.
<suppressed ~8 debug messages>

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

30.9. Rerunning OPT passes. (Maybe there is more to do..)

30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_cfloat152..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_cfloat152.
Performed a total of 0 changes.

30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

30.13. Executing OPT_DFF pass (perform DFF optimizations).

30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..

30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

30.16. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.
<suppressed ~25 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..
Removed 2 unused cells and 16 unused wires.
<suppressed ~3 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_cfloat152..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_cfloat152.
    Consolidated identical input bits for $mux cell $ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:199$35:
      Old ports: A=2'00, B=2'11, Y=\_theResult___fst_mantissa__h682
      New ports: A=1'0, B=1'1, Y=\_theResult___fst_mantissa__h682 [0]
      New connections: \_theResult___fst_mantissa__h682 [1] = \_theResult___fst_mantissa__h682 [0]
  Optimizing cells in module \mk_fp32_cfloat152.
    Consolidated identical input bits for $mux cell $ternary$/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/verilog_dir/mk_fp32_cfloat152.v:204$36:
      Old ports: A=2'00, B=\_theResult___fst_mantissa__h682, Y=\_theResult___fst_mantissa__h688
      New ports: A=1'0, B=\_theResult___fst_mantissa__h682 [0], Y=\_theResult___fst_mantissa__h688 [0]
      New connections: \_theResult___fst_mantissa__h688 [1] = \_theResult___fst_mantissa__h688 [0]
  Optimizing cells in module \mk_fp32_cfloat152.
Performed a total of 2 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.
<suppressed ~2 debug messages>

35.10. Rerunning OPT passes. (Maybe there is more to do..)

35.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_cfloat152..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

35.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_cfloat152.
Performed a total of 0 changes.

35.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

35.14. Executing OPT_SHARE pass.

35.15. Executing OPT_DFF pass (perform DFF optimizations).

35.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

35.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

35.18. Rerunning OPT passes. (Maybe there is more to do..)

35.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_cfloat152..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

35.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_cfloat152.
Performed a total of 0 changes.

35.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

35.22. Executing OPT_SHARE pass.

35.23. Executing OPT_DFF pass (perform DFF optimizations).

35.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..

35.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

35.26. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /nix/store/rdd3k15bm7qkhpq4kk4ghkxdqq3zjd1r-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/rdd3k15bm7qkhpq4kk4ghkxdqq3zjd1r-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using template $paramod$2ab0ff81670440372478bad90d3da37d43208ad1\_90_alu for cells of type $alu.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$a40b3a69ab2154dca9743e30e1e84efb03b892b4\_90_alu for cells of type $alu.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using template $paramod$65af072f6065f0ed27ad80c8089003dcba6e1c40\_90_alu for cells of type $alu.
Using template $paramod$10ed987432f06055e5279101f9ec60a49861b43c\_90_alu for cells of type $alu.
Using template $paramod$403a3c2fa431a154c52a6a5429d7a6260b5d144f\_90_alu for cells of type $alu.
Using template $paramod$adbaf76fa5a3091a329503792521395f8ff4d1a4\_90_alu for cells of type $alu.
Using template $paramod$7ef5df9e753d3f8c692994a58e47039e65e856ea\_90_alu for cells of type $alu.
Using template $paramod$a04dd9d4d8b430140c4ff94b50470fb380fda2a0\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper maccmap for cells of type $macc.
  add \rg_fp32 [27:23] (5 bits, unsigned)
  add \rg_bias [4:0] (5 bits, unsigned)
  add 5'00001 (5 bits, unsigned)
  packed 1 (1) bits / 1 words into adder tree
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
No more expansions possible.
<suppressed ~1302 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.
<suppressed ~400 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
<suppressed ~297 debug messages>
Removed a total of 99 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..
Removed 57 unused cells and 514 unused wires.
<suppressed ~58 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\mk_fp32_cfloat152' to `<abc-temp-dir>/input.blif'..
Extracted 445 gates and 485 wires to a netlist network with 38 inputs and 8 outputs.

38.1.1. Executing ABC.
Running ABC command: "/nix/store/p9vsk7iilm6h471bwb1vl688w4r88dg7-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        9
ABC RESULTS:               NOT cells:       23
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              NAND cells:       22
ABC RESULTS:               NOR cells:       14
ABC RESULTS:               XOR cells:       89
ABC RESULTS:               MUX cells:       17
ABC RESULTS:            ANDNOT cells:      129
ABC RESULTS:                OR cells:       71
ABC RESULTS:        internal signals:      439
ABC RESULTS:           input signals:       38
ABC RESULTS:          output signals:        8
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.
<suppressed ~6 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..
Removed 1 unused cells and 246 unused wires.
<suppressed ~19 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \mk_fp32_cfloat152

40.2. Analyzing design hierarchy..
Top module:  \mk_fp32_cfloat152
Removed 0 unused modules.

41. Printing statistics.

=== mk_fp32_cfloat152 ===

   Number of wires:                407
   Number of wire bits:            605
   Number of public wires:          35
   Number of public wire bits:     233
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                418
     $_ANDNOT_                     125
     $_AND_                          7
     $_MUX_                         17
     $_NAND_                        22
     $_NOR_                         12
     $_NOT_                         22
     $_ORNOT_                        4
     $_OR_                          71
     $_SDFF_PN0_                    39
     $_SDFF_PP0_                     7
     $_XNOR_                         5
     $_XOR_                         87

42. Executing CHECK pass (checking for obvious problems).
Checking module mk_fp32_cfloat152...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_16-39-46/05-yosys-synthesis/post_techmap.dot'.
Dumping module mk_fp32_cfloat152 to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mk_fp32_cfloat152..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mk_fp32_cfloat152.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mk_fp32_cfloat152'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mk_fp32_cfloat152.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..
Removed 0 unused cells and 26 unused wires.
<suppressed ~26 debug messages>
{
   "creator": "Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\mk_fp32_cfloat152": {
         "num_wires":         381,
         "num_wire_bits":     474,
         "num_pub_wires":     9,
         "num_pub_wire_bits": 102,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         418,
         "num_cells_by_type": {
            "$_ANDNOT_": 125,
            "$_AND_": 7,
            "$_MUX_": 17,
            "$_NAND_": 22,
            "$_NOR_": 12,
            "$_NOT_": 22,
            "$_ORNOT_": 4,
            "$_OR_": 71,
            "$_SDFF_PN0_": 39,
            "$_SDFF_PP0_": 7,
            "$_XNOR_": 5,
            "$_XOR_": 87
         }
      }
   },
      "design": {
         "num_wires":         381,
         "num_wire_bits":     474,
         "num_pub_wires":     9,
         "num_pub_wire_bits": 102,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         418,
         "num_cells_by_type": {
            "$_ANDNOT_": 125,
            "$_AND_": 7,
            "$_MUX_": 17,
            "$_NAND_": 22,
            "$_NOR_": 12,
            "$_NOT_": 22,
            "$_ORNOT_": 4,
            "$_OR_": 71,
            "$_SDFF_PN0_": 39,
            "$_SDFF_PP0_": 7,
            "$_XNOR_": 5,
            "$_XOR_": 87
         }
      }
}

[INFO] Applying latch mapping from '/home/kapil/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v'â¦

47. Executing TECHMAP pass (map to technology primitives).

47.1. Executing Verilog-2005 frontend: /home/kapil/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/kapil/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

47.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

49. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

49.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\mk_fp32_cfloat152':
  mapped 46 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.
{
   "creator": "Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\mk_fp32_cfloat152": {
         "num_wires":         427,
         "num_wire_bits":     520,
         "num_pub_wires":     9,
         "num_pub_wire_bits": 102,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         464,
         "num_cells_by_type": {
            "$_ANDNOT_": 125,
            "$_AND_": 7,
            "$_MUX_": 63,
            "$_NAND_": 22,
            "$_NOR_": 12,
            "$_NOT_": 22,
            "$_ORNOT_": 4,
            "$_OR_": 71,
            "$_XNOR_": 5,
            "$_XOR_": 87,
            "sky130_fd_sc_hd__dfxtp_2": 46
         }
      }
   },
      "design": {
         "num_wires":         427,
         "num_wire_bits":     520,
         "num_pub_wires":     9,
         "num_pub_wire_bits": 102,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         464,
         "num_cells_by_type": {
            "$_ANDNOT_": 125,
            "$_AND_": 7,
            "$_MUX_": 63,
            "$_NAND_": 22,
            "$_NOR_": 12,
            "$_NOT_": 22,
            "$_ORNOT_": 4,
            "$_OR_": 71,
            "$_XNOR_": 5,
            "$_XOR_": 87,
            "sky130_fd_sc_hd__dfxtp_2": 46
         }
      }
}

[INFO] USING STRATEGY AREA 0

50. Executing ABC pass (technology mapping using ABC).

50.1. Extracting gate netlist of module `\mk_fp32_cfloat152' to `/tmp/yosys-abc-hHpwyF/input.blif'..
Extracted 418 gates and 496 wires to a netlist network with 77 inputs and 46 outputs.

50.1.1. Executing ABC.
Running ABC command: "/nix/store/p9vsk7iilm6h471bwb1vl688w4r88dg7-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-hHpwyF/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-hHpwyF/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-hHpwyF/input.blif 
ABC: + read_lib -w /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_16-39-46/tmp/dbabab956ed54976a87c008e44ad7e40.lib 
ABC: Parsing finished successfully.  Parsing time =     0.11 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_16-39-46/tmp/dbabab956ed54976a87c008e44ad7e40.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.17 sec
ABC: Memory =    9.54 MB. Time =     0.17 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_16-39-46/05-yosys-synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2/Y".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /home/kapil/Shakti-Software-Development/Mindgrove/FP_convertor_modules/runs/RUN_2023-12-09_16-39-46/05-yosys-synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 15000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 15000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 6 -S 750.0 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + upsize -D 15000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: Current delay (3147.40 ps) does not exceed the target delay (15000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 15000 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: + stime -p 
ABC: Cannot find the default PI driving cell (sky130_fd_sc_hd__inv_2/Y) in the library.
ABC: WireLoad = "none"  Gates =    224 ( 21.0 %)   Cap = 10.1 ff (  5.0 %)   Area =     1776.70 ( 79.0 %)   Delay =  3354.22 ps  (  5.4 %)               
ABC: Path  0 --      35 : 0    8 pi                        A =   0.00  Df =   0.0   -0.0 ps  S =   0.0 ps  Cin =  0.0 ff  Cout =  26.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     233 : 4    1 sky130_fd_sc_hd__or4_2    A =   8.76  Df = 635.0 -551.3 ps  S =  94.8 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 310.4 ff  G =  140  
ABC: Path  2 --     234 : 1    6 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 826.6 -503.3 ps  S = 284.4 ps  Cin =  2.1 ff  Cout =  23.7 ff  Cmax = 130.0 ff  G = 1078  
ABC: Path  3 --     236 : 2    6 sky130_fd_sc_hd__xor2_2   A =  16.27  Df =1064.7 -277.1 ps  S = 457.1 ps  Cin =  8.6 ff  Cout =  36.1 ff  Cmax = 130.0 ff  G =  401  
ABC: Path  4 --     248 : 2    2 sky130_fd_sc_hd__xnor2_2  A =  16.27  Df =1253.0 -196.2 ps  S = 153.9 ps  Cin =  8.5 ff  Cout =   7.2 ff  Cmax = 121.8 ff  G =   80  
ABC: Path  5 --     251 : 5    1 sky130_fd_sc_hd__a2111o_2 A =  12.51  Df =1512.9  -73.8 ps  S =  54.1 ps  Cin =  2.4 ff  Cout =   1.4 ff  Cmax = 324.1 ff  G =   55  
ABC: Path  6 --     252 : 4    1 sky130_fd_sc_hd__or4_2    A =   8.76  Df =2029.0 -505.0 ps  S =  90.0 ps  Cin =  1.5 ff  Cout =   1.4 ff  Cmax = 310.4 ff  G =   89  
ABC: Path  7 --     253 : 4    2 sky130_fd_sc_hd__or4_2    A =   8.76  Df =2604.8 -676.1 ps  S = 119.6 ps  Cin =  1.5 ff  Cout =   8.1 ff  Cmax = 310.4 ff  G =  510  
ABC: Path  8 --     307 : 3    1 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =2942.3 -798.4 ps  S =  46.3 ps  Cin =  2.3 ff  Cout =   2.5 ff  Cmax = 297.6 ff  G =  103  
ABC: Path  9 --     312 : 4    1 sky130_fd_sc_hd__o31a_2   A =  10.01  Df =3354.2 -767.0 ps  S = 190.3 ps  Cin =  2.3 ff  Cout =  33.4 ff  Cmax = 285.7 ff  G = 1425  
ABC: Start-point = pi34 (\rg_bias [2]).  End-point = po33 ($auto$rtlil.cc:2620:MuxGate$2106).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   77/   46  lat =    0  nd =   224  edge =    514  area =1776.94  delay =10.00  lev = 10
ABC: + write_blif /tmp/yosys-abc-hHpwyF/output.blif 

50.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       50
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       43
ABC RESULTS:        internal signals:      373
ABC RESULTS:           input signals:       77
ABC RESULTS:          output signals:       46
Removing temp directory.

51. Executing SETUNDEF pass (replace undef values with defined constants).

52. Executing HILOMAP pass (mapping to constant drivers).
Warning: Selection "sky130_fd_sc_hd__conb_1" did not match any module.
Warning: Selection "LO" did not match any object.

53. Executing SPLITNETS pass (splitting up multi-bit signals).

54. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mk_fp32_cfloat152..
Removed 60 unused cells and 571 unused wires.
<suppressed ~97 debug messages>

55. Executing INSBUF pass (insert buffer cells for connected wires).

56. Executing CHECK pass (checking for obvious problems).
Checking module mk_fp32_cfloat152...
Found and reported 0 problems.
{
   "creator": "Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)",
   "invocation": "stat -json ",
   "modules": {
      "\\mk_fp32_cfloat152": {
         "num_wires":         207,
         "num_wire_bits":     250,
         "num_pub_wires":     23,
         "num_pub_wire_bits": 66,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         210,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111o_2": 1,
            "sky130_fd_sc_hd__a211o_2": 1,
            "sky130_fd_sc_hd__a211oi_2": 2,
            "sky130_fd_sc_hd__a21bo_2": 3,
            "sky130_fd_sc_hd__a21boi_2": 1,
            "sky130_fd_sc_hd__a21o_2": 3,
            "sky130_fd_sc_hd__a21oi_2": 7,
            "sky130_fd_sc_hd__a221o_2": 4,
            "sky130_fd_sc_hd__a2bb2o_2": 1,
            "sky130_fd_sc_hd__a32o_2": 2,
            "sky130_fd_sc_hd__a41o_2": 2,
            "sky130_fd_sc_hd__and2_2": 30,
            "sky130_fd_sc_hd__and2b_2": 1,
            "sky130_fd_sc_hd__and3_2": 8,
            "sky130_fd_sc_hd__buf_1": 23,
            "sky130_fd_sc_hd__dfxtp_2": 26,
            "sky130_fd_sc_hd__inv_2": 4,
            "sky130_fd_sc_hd__mux2_2": 1,
            "sky130_fd_sc_hd__nand2_2": 12,
            "sky130_fd_sc_hd__nand3_2": 1,
            "sky130_fd_sc_hd__nand3b_2": 1,
            "sky130_fd_sc_hd__nand4_2": 1,
            "sky130_fd_sc_hd__nand4b_2": 1,
            "sky130_fd_sc_hd__nor2_2": 13,
            "sky130_fd_sc_hd__nor3_2": 2,
            "sky130_fd_sc_hd__o211a_2": 1,
            "sky130_fd_sc_hd__o21a_2": 10,
            "sky130_fd_sc_hd__o21ai_2": 5,
            "sky130_fd_sc_hd__o21ba_2": 1,
            "sky130_fd_sc_hd__o22a_2": 1,
            "sky130_fd_sc_hd__o31a_2": 2,
            "sky130_fd_sc_hd__o31ai_2": 2,
            "sky130_fd_sc_hd__o41a_2": 1,
            "sky130_fd_sc_hd__or2_2": 6,
            "sky130_fd_sc_hd__or2b_2": 2,
            "sky130_fd_sc_hd__or3_2": 5,
            "sky130_fd_sc_hd__or3b_2": 1,
            "sky130_fd_sc_hd__or4_2": 4,
            "sky130_fd_sc_hd__or4b_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 6,
            "sky130_fd_sc_hd__xor2_2": 11
         }
      }
   },
      "design": {
         "num_wires":         207,
         "num_wire_bits":     250,
         "num_pub_wires":     23,
         "num_pub_wire_bits": 66,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         210,
         "num_cells_by_type": {
            "sky130_fd_sc_hd__a2111o_2": 1,
            "sky130_fd_sc_hd__a211o_2": 1,
            "sky130_fd_sc_hd__a211oi_2": 2,
            "sky130_fd_sc_hd__a21bo_2": 3,
            "sky130_fd_sc_hd__a21boi_2": 1,
            "sky130_fd_sc_hd__a21o_2": 3,
            "sky130_fd_sc_hd__a21oi_2": 7,
            "sky130_fd_sc_hd__a221o_2": 4,
            "sky130_fd_sc_hd__a2bb2o_2": 1,
            "sky130_fd_sc_hd__a32o_2": 2,
            "sky130_fd_sc_hd__a41o_2": 2,
            "sky130_fd_sc_hd__and2_2": 30,
            "sky130_fd_sc_hd__and2b_2": 1,
            "sky130_fd_sc_hd__and3_2": 8,
            "sky130_fd_sc_hd__buf_1": 23,
            "sky130_fd_sc_hd__dfxtp_2": 26,
            "sky130_fd_sc_hd__inv_2": 4,
            "sky130_fd_sc_hd__mux2_2": 1,
            "sky130_fd_sc_hd__nand2_2": 12,
            "sky130_fd_sc_hd__nand3_2": 1,
            "sky130_fd_sc_hd__nand3b_2": 1,
            "sky130_fd_sc_hd__nand4_2": 1,
            "sky130_fd_sc_hd__nand4b_2": 1,
            "sky130_fd_sc_hd__nor2_2": 13,
            "sky130_fd_sc_hd__nor3_2": 2,
            "sky130_fd_sc_hd__o211a_2": 1,
            "sky130_fd_sc_hd__o21a_2": 10,
            "sky130_fd_sc_hd__o21ai_2": 5,
            "sky130_fd_sc_hd__o21ba_2": 1,
            "sky130_fd_sc_hd__o22a_2": 1,
            "sky130_fd_sc_hd__o31a_2": 2,
            "sky130_fd_sc_hd__o31ai_2": 2,
            "sky130_fd_sc_hd__o41a_2": 1,
            "sky130_fd_sc_hd__or2_2": 6,
            "sky130_fd_sc_hd__or2b_2": 2,
            "sky130_fd_sc_hd__or3_2": 5,
            "sky130_fd_sc_hd__or3b_2": 1,
            "sky130_fd_sc_hd__or4_2": 4,
            "sky130_fd_sc_hd__or4b_2": 1,
            "sky130_fd_sc_hd__xnor2_2": 6,
            "sky130_fd_sc_hd__xor2_2": 11
         }
      }
}

57. Executing Verilog backend.
Dumping module `\mk_fp32_cfloat152'.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 1f06d1a858, CPU: user 1.43s system 0.07s, MEM: 48.75 MB peak
Yosys 0.33 (git sha1 2584903a060, clang++ 11.1.0 -fPIC -Os)
Time spent: 57% 2x abc (1 sec), 7% 30x opt_expr (0 sec), ...
